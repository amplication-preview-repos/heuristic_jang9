/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PincodeService } from "../pincode.service";
import { PincodeCreateInput } from "./PincodeCreateInput";
import { Pincode } from "./Pincode";
import { PincodeFindManyArgs } from "./PincodeFindManyArgs";
import { PincodeWhereUniqueInput } from "./PincodeWhereUniqueInput";
import { PincodeUpdateInput } from "./PincodeUpdateInput";

export class PincodeControllerBase {
  constructor(protected readonly service: PincodeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Pincode })
  async createPincode(
    @common.Body() data: PincodeCreateInput
  ): Promise<Pincode> {
    return await this.service.createPincode({
      data: data,
      select: {
        count: true,
        createdAt: true,
        id: true,
        latitude: true,
        live: true,
        longitude: true,
        notYetLive: true,
        pincode: true,
        targeted: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Pincode] })
  @ApiNestedQuery(PincodeFindManyArgs)
  async pincodes(@common.Req() request: Request): Promise<Pincode[]> {
    const args = plainToClass(PincodeFindManyArgs, request.query);
    return this.service.pincodes({
      ...args,
      select: {
        count: true,
        createdAt: true,
        id: true,
        latitude: true,
        live: true,
        longitude: true,
        notYetLive: true,
        pincode: true,
        targeted: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Pincode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pincode(
    @common.Param() params: PincodeWhereUniqueInput
  ): Promise<Pincode | null> {
    const result = await this.service.pincode({
      where: params,
      select: {
        count: true,
        createdAt: true,
        id: true,
        latitude: true,
        live: true,
        longitude: true,
        notYetLive: true,
        pincode: true,
        targeted: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Pincode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePincode(
    @common.Param() params: PincodeWhereUniqueInput,
    @common.Body() data: PincodeUpdateInput
  ): Promise<Pincode | null> {
    try {
      return await this.service.updatePincode({
        where: params,
        data: data,
        select: {
          count: true,
          createdAt: true,
          id: true,
          latitude: true,
          live: true,
          longitude: true,
          notYetLive: true,
          pincode: true,
          targeted: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Pincode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePincode(
    @common.Param() params: PincodeWhereUniqueInput
  ): Promise<Pincode | null> {
    try {
      return await this.service.deletePincode({
        where: params,
        select: {
          count: true,
          createdAt: true,
          id: true,
          latitude: true,
          live: true,
          longitude: true,
          notYetLive: true,
          pincode: true,
          targeted: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
