/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Pincode } from "./Pincode";
import { PincodeCountArgs } from "./PincodeCountArgs";
import { PincodeFindManyArgs } from "./PincodeFindManyArgs";
import { PincodeFindUniqueArgs } from "./PincodeFindUniqueArgs";
import { CreatePincodeArgs } from "./CreatePincodeArgs";
import { UpdatePincodeArgs } from "./UpdatePincodeArgs";
import { DeletePincodeArgs } from "./DeletePincodeArgs";
import { PincodeService } from "../pincode.service";
@graphql.Resolver(() => Pincode)
export class PincodeResolverBase {
  constructor(protected readonly service: PincodeService) {}

  async _pincodesMeta(
    @graphql.Args() args: PincodeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Pincode])
  async pincodes(
    @graphql.Args() args: PincodeFindManyArgs
  ): Promise<Pincode[]> {
    return this.service.pincodes(args);
  }

  @graphql.Query(() => Pincode, { nullable: true })
  async pincode(
    @graphql.Args() args: PincodeFindUniqueArgs
  ): Promise<Pincode | null> {
    const result = await this.service.pincode(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Pincode)
  async createPincode(
    @graphql.Args() args: CreatePincodeArgs
  ): Promise<Pincode> {
    return await this.service.createPincode({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Pincode)
  async updatePincode(
    @graphql.Args() args: UpdatePincodeArgs
  ): Promise<Pincode | null> {
    try {
      return await this.service.updatePincode({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pincode)
  async deletePincode(
    @graphql.Args() args: DeletePincodeArgs
  ): Promise<Pincode | null> {
    try {
      return await this.service.deletePincode(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
